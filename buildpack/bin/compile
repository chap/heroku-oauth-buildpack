#!/bin/sh

# Download and install dyno-proxy buildpack
# Start dyno-proxy in background
# Dyno-proxy will install and configure heroku-oauth plugin

# If HEROKU_OAUTH_BUILDPACK_SOURCE is set, run the buildpack in that directory
# Otherwise, continue with default behavior
if [ -n "$HEROKU_OAUTH_BUILDPACK_SOURCE" ]; then
  echo "Running buildpack in $HEROKU_OAUTH_BUILDPACK_SOURCE"
  $HEROKU_OAUTH_BUILDPACK_SOURCE/bin/compile $BUILD_DIR $CACHE_DIR $ENV_DIR
  exit 0
else
  echo "DEBUG: Running default buildpack"
fi

# Exit on error
set -e

# Define buildpack directories
BUILDPACK_DIR="$(cd "$(dirname "$0")/.." && pwd)"
BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"

# check to see if dyno-proxy is already installed
if [ -f $BUILDPACK_DIR/bin/dyno-proxy ]; then
  echo "Dyno-proxy already installed"
  exit 0
fi

# install dyno-proxy
curl -sSL https://dyno-proxy-buildpack-staging-8e0a72cef086.herokuapp.com/buildpack-v1alpha1.tgz -o dyno-proxy-buildpack.tgz
mkdir -p dyno-proxy-buildpack
tar xzf dyno-proxy-buildpack.tgz -C dyno-proxy-buildpack
cp -r dyno-proxy-buildpack/bin/dyno-proxy* $BUILDPACK_DIR/bin/
cp -r dyno-proxy-buildpack/bin/compile $BUILDPACK_DIR/bin/compile-dyno-proxy
chmod +x $BUILDPACK_DIR/bin/compile-dyno-proxy
$BUILDPACK_DIR/bin/compile-dyno-proxy $BUILD_DIR $CACHE_DIR $ENV_DIR
echo "Dyno-proxy installed"

# Automatically start dyno-proxy in background
# prepend DYNO_PROXY=background to top of .profile.d/dyno-proxy-defaults.sh
{
  echo "export DYNO_PROXY=background"
  cat $BUILD_DIR/.profile.d/dyno-proxy-defaults.sh
} > $BUILD_DIR/.profile.d/dyno-proxy-defaults.sh.new
mv $BUILD_DIR/.profile.d/dyno-proxy-defaults.sh.new $BUILD_DIR/.profile.d/dyno-proxy-defaults.sh
chmod +x $BUILD_DIR/.profile.d/dyno-proxy-defaults.sh

exit 0